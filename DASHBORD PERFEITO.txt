import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import api from "@/services/api";
import { FileText, Sparkles, LogOut, Layers3, BookOpenText, Utensils, Rocket, Facebook } from "lucide-react";
import Logo from "@/assets/logo-adsfood.svg";
import MapComponent from "@/components/MapComponent";
import { calculateCoverageArea, estimatePopulationInCoverage } from "@/utils/mapUtils";

interface Campaign {
  id: number;
  titulo: string;
  status: string;
  orcamento: number;
  clicks?: number;
  impressao?: number;
  cpc?: number;
  cpm?: number;
  roi?: number;
  produto?: string;
  dataCriacao?: string;
}

const AVG_POPULATION_DENSITY = 7500;

export default function Dashboard() {
  const navigate = useNavigate();
  const [nomeRestaurante, setNomeRestaurante] = useState("");
  const [metaConnected, setMetaConnected] = useState(false);
  const [campanhas, setCampanhas] = useState<Campaign[]>([]);
  const [position, setPosition] = useState<[number, number] | null>(null);
  const [radius, setRadius] = useState<number>(1000);
  const [coverageArea, setCoverageArea] = useState(0);
  const [estimatedPopulation, setEstimatedPopulation] = useState(0);

  useEffect(() => {
    const token = localStorage.getItem("token");
    const nome = localStorage.getItem("nomeRestaurante");
    const meta = localStorage.getItem("facebookToken");
    const restaurantId = localStorage.getItem("restaurantId");

    const urlParams = new URLSearchParams(window.location.search);
    const facebookTokenFromUrl = urlParams.get("facebookToken");

    if (facebookTokenFromUrl) {
      localStorage.setItem("facebookToken", facebookTokenFromUrl);
      setMetaConnected(true);

      if (restaurantId) {
        api.post("/auth/facebook/token", {
          restaurantId,
          facebookToken: facebookTokenFromUrl
        })
        .then(() => {
          console.log("Token salvo com sucesso no backend");
        })
        .catch((err) => {
          console.error("Erro ao salvar token no backend", err);
        });
      }

      const cleanUrl = window.location.origin + window.location.pathname;
      window.history.replaceState({}, document.title, cleanUrl);
    }

    if (!token) {
      navigate("/login");
    }

    if (nome) setNomeRestaurante(nome);
    if (meta) setMetaConnected(true);

    fetchCampanhas();

    const savedPosition = localStorage.getItem("establishmentPosition");
    const savedRadius = localStorage.getItem("coverageRadius");

    if (savedPosition) {
      setPosition(JSON.parse(savedPosition));
    } else {
      navigator.geolocation.getCurrentPosition(
        (pos) => {
          setPosition([pos.coords.latitude, pos.coords.longitude]);
        },
        () => {
          setPosition([-23.55052, -46.633308]); // Fallback: S√£o Paulo
        }
      );
    }

    if (savedRadius) {
      setRadius(Number(savedRadius));
    }
  }, [navigate]);

  useEffect(() => {
    if (position) {
      const area = calculateCoverageArea(position, radius);
      setCoverageArea(area);

      const population = estimatePopulationInCoverage(position, radius, AVG_POPULATION_DENSITY);
      setEstimatedPopulation(population);
    }
  }, [position, radius]);

  function handleSaveLocation() {
    if (position) {
      localStorage.setItem("establishmentPosition", JSON.stringify(position));
      localStorage.setItem("coverageRadius", radius.toString());
      alert("Configura√ß√µes de localiza√ß√£o salvas com sucesso!");
    }
  }

  async function fetchCampanhas() {
    try {
      const response = await api.get("/campaigns");
      setCampanhas(response.data);
    } catch (error) {
      console.error("Erro ao buscar campanhas:", error);
    }
  }

  function conectarMetaAds() {
    window.location.href = "http://localhost:5000/api/auth/facebook";
  }

  function handleLogout() {
    localStorage.clear();
    navigate("/login");
  }

  const campanhasAtivas = campanhas.filter(c => c.status === "Ativa").length;
  const campanhasPausadas = campanhas.filter(c => c.status === "Pausada").length;
  const campanhasFinalizadas = campanhas.filter(c => c.status === "Finalizada").length;
  const orcamentoTotal = campanhas.reduce((total, campanha) => campanha.status === "Ativa" ? total + campanha.orcamento : total, 0);
  const ultimaCampanha = campanhas.length > 0 ? campanhas[campanhas.length - 1] : null;
  const campanhaTopROI = campanhas.reduce((top, curr) => (curr.roi && (!top || curr.roi > (top.roi || 0))) ? curr : top, null);

  const produtoMaisPromovido = campanhas.reduce((acc, c) => {
    if (!c.produto) return acc;
    acc[c.produto] = (acc[c.produto] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  const topProdutos = Object.entries(produtoMaisPromovido)
    .map(([produto, qtd]) => ({ produto, qtd }))
    .sort((a, b) => b.qtd - a.qtd);

  const menuItems = [
    { icon: <Sparkles className="w-6 h-6" />, label: "In√≠cio", route: "/dashboard" },
    { icon: <Sparkles className="w-6 h-6" />, label: "Adicionar Legenda", route: "/generate-legend" },
    { icon: <BookOpenText className="w-6 h-6" />, label: "Hist√≥rico de Legendas", route: "/legendas" },
    { icon: <Layers3 className="w-6 h-6" />, label: "Campanhas", route: "/campaigns" },
    { icon: <FileText className="w-6 h-6" />, label: "Nova Campanha", route: "/new-campaign" },
    { icon: <Rocket className="w-6 h-6" />, label: "Campanha Autom√°tica", route: "/automacao/visualizar" },
    { icon: <Utensils className="w-6 h-6" />, label: "Card√°pio", route: "/importar-link" },
    { icon: <Facebook className="w-6 h-6" />, label: "Conectar Meta Ads", route: "#", action: conectarMetaAds },
    { icon: <LogOut className="w-6 h-6" />, label: "Sair", route: "/logout", action: handleLogout }
  ];

  return (
    <div className="flex min-h-screen">
      <aside className="bg-purple-700 text-white flex flex-col py-6 px-2 transition-all duration-300 group hover:w-48 w-20 overflow-hidden">
        <div
          className="flex items-center gap-2 justify-center group-hover:justify-start px-2 mb-6 cursor-pointer"
          onClick={() => navigate("/dashboard")}
        >
          <img src={Logo} alt="ADSFOOD Logo" className="w-8 h-8 object-contain rounded-full" />
          <span className="hidden group-hover:inline text-sm font-bold">ADSFOOD</span>
        </div>

        {menuItems.map(({ icon, label, route, action }, index) => (
          <div
            key={index}
            className="flex items-center gap-3 px-2 py-2 hover:bg-purple-600 rounded-xl cursor-pointer"
            onClick={() => action ? action() : navigate(route)}
          >
            {icon}
            <span className="hidden group-hover:inline text-sm">{label}</span>
          </div>
        ))}
      </aside>

      <div className="flex-1 bg-gradient-to-br from-purple-300 via-white to-purple-300 p-6">
        <div className="bg-white rounded-3xl shadow-2xl p-8 max-w-6xl mx-auto text-center animate-fadeIn">
          <h1 className="text-4xl font-bold text-purple-700 mb-4">Dashboard üçî</h1>

          <p className="text-lg text-gray-700 mb-4">
            Bem-vindo, <span className="font-bold">{nomeRestaurante || "Restaurante"}</span>!
          </p>

          {metaConnected && (
            <div className="text-green-600 font-bold mb-4">‚úÖ Conta Meta Ads conectada!</div>
          )}

          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
            <div className="bg-green-100 p-4 rounded-xl shadow">
              <h2 className="text-xl font-bold text-green-700">{campanhasAtivas}</h2>
              <p className="text-green-700">Campanhas Ativas</p>
            </div>
            <div className="bg-yellow-100 p-4 rounded-xl shadow">
              <h2 className="text-xl font-bold text-yellow-700">{campanhasPausadas}</h2>
              <p className="text-yellow-700">Campanhas Pausadas</p>
            </div>
            <div className="bg-red-100 p-4 rounded-xl shadow">
              <h2 className="text-xl font-bold text-red-700">{campanhasFinalizadas}</h2>
              <p className="text-red-700">Campanhas Finalizadas</p>
            </div>
            <div className="bg-blue-100 p-4 rounded-xl shadow">
              <h2 className="text-xl font-bold text-blue-700">R$ {orcamentoTotal.toFixed(2)}</h2>
              <p className="text-blue-700">Or√ßamento Investido</p>
            </div>
          </div>

          {position && (
            <div className="mb-8 text-left">
              <h2 className="text-xl font-bold text-purple-600 mb-4">üó∫Ô∏è √Årea de Cobertura</h2>
              <MapComponent
                initialPosition={position}
                initialRadius={radius}
                onPositionChange={setPosition}
                onRadiusChange={setRadius}
              />

              <div className="mt-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">Ajustar Raio de Cobertura (m)</label>
                <input
                  type="range"
                  min={100}
                  max={5000}
                  step={100}
                  value={radius}
                  onChange={(e) => setRadius(Number(e.target.value))}
                  className="w-full"
                />
              </div>

              <div className="mt-4 grid md:grid-cols-3 gap-4">
                <div className="bg-gray-100 p-4 rounded-xl">
                  <p className="text-gray-600 text-sm">√Årea de cobertura</p>
                  <p className="text-xl font-bold text-purple-700">{coverageArea} km¬≤</p>
                </div>
                <div className="bg-gray-100 p-4 rounded-xl">
                  <p className="text-gray-600 text-sm">Raio</p>
                  <p className="text-xl font-bold text-purple-700">{(radius / 1000).toFixed(1)} km</p>
                </div>
                <div className="bg-gray-100 p-4 rounded-xl">
                  <p className="text-gray-600 text-sm">Popula√ß√£o estimada</p>
                  <p className="text-xl font-bold text-purple-700">{estimatedPopulation.toLocaleString()} pessoas</p>
                </div>
              </div>

              <div className="mt-4">
                <button
                  onClick={handleSaveLocation}
                  className="bg-purple-700 text-white px-6 py-2 rounded-full font-semibold hover:bg-purple-800 transition"
                >
                  Salvar Configura√ß√µes
                </button>
              </div>
            </div>
          )}

          {topProdutos.length > 0 && (
            <div className="mb-8">
              <h2 className="text-xl font-bold text-purple-600 mb-2">üî• Tend√™ncia do M√™s</h2>
              <p className="text-gray-700">Produto mais promovido: <span className="font-bold text-purple-700">{topProdutos[0].produto}</span></p>
            </div>
          )}

          {campanhaTopROI && (
            <div className="mb-8">
              <h2 className="text-xl font-bold text-purple-600 mb-2">üèÜ Melhor Campanha (ROI)</h2>
              <p className="text-gray-700">{campanhaTopROI.titulo} - ROI: <span className="font-bold text-green-600">{campanhaTopROI.roi}%</span></p>
            </div>
          )}

          {ultimaCampanha && (
            <div className="mb-8">
              <h2 className="text-xl font-bold text-purple-600 mb-2">üïì √öltima Campanha Criada</h2>
              <p className="text-gray-700">{ultimaCampanha.titulo} - Status: <span className={`font-bold ${ultimaCampanha.status === "Ativa" ? "text-green-600" : ultimaCampanha.status === "Pausada" ? "text-yellow-600" : "text-red-600"}`}>{ultimaCampanha.status}</span></p>
            </div>
          )}

          <div className="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 rounded-xl">
            <p>üí° Dica: Crie campanhas para produtos com maior engajamento. Use as legendas geradas com IA para melhorar convers√£o!</p>
          </div>
        </div>
      </div>
    </div>
  );
}
